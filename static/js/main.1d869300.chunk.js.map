{"version":3,"sources":["components/Player.js","components/Bird.js","components/Hearts.js","components/Forest.js","components/App.js","serviceWorker.js","index.js"],"names":["Player","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","onClick","props","attack","className","concat","status","Component","Bird","Hearts","heartTotal","count","map","point","index","key","char","Forest","playerAttack","playerStatus","setState","birdStatus","setTimeout","hurtBird","birdAttack","hurtPlayer","birdHearts","heart","shift","playerHearts","components_Hearts","components_Player","components_Bird","App","components_Forest","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d869300.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/Player.css\";\n\nclass Player extends Component {\n  constructor() {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        onClick={this.props.attack}\n        className={`player ${this.props.status}`}\n      >\n        <div className={`player-hit ${this.props.status}`} />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport \"../css/Bird.css\";\n\nclass Bird extends Component {\n  constructor() {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div onClick={this.props.attack} className={`bird ${this.props.status}`}>\n        <div className={`bird-hit ${this.props.status}`} />\n      </div>\n    );\n  }\n}\n\nexport default Bird;\n","import React from \"react\";\nimport \"../css/Hearts.css\";\n\nconst Hearts = props => {\n  const heartTotal = props.count.map((point, index) => {\n    return <div key={`${props.char}${index}`} className=\"heart-point\" />;\n  });\n\n  return <section className={`hearts ${props.char}`}>{heartTotal}</section>;\n};\n\nexport default Hearts;\n","import React, { Component } from \"react\";\nimport \"../css/Forest.css\";\n\nimport Player from \"./Player\";\nimport Bird from \"./Bird\";\nimport Hearts from \"./Hearts\";\n\nclass Forest extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      playerStatus: \"idle\",\n      playerHearts: [0, 0, 0],\n      birdStatus: \"idle\",\n      birdHearts: [0, 0, 0]\n    };\n  }\n\n  playerAttack = () => {\n    if (\n      this.state.playerStatus !== \"attack\" &&\n      this.state.playerStatus !== \"hit\"\n    ) {\n      this.setState({\n        playerStatus: \"attack\",\n        birdStatus: \"hit\"\n      });\n\n      setTimeout(this.hurtBird, 750);\n    }\n  };\n\n  birdAttack = () => {\n    if (this.state.birdStatus !== \"attack\" && this.state.birdStatus !== \"hit\") {\n      this.setState({\n        birdStatus: \"attack\",\n        playerStatus: \"hit\"\n      });\n\n      setTimeout(this.hurtPlayer, 700);\n    }\n  };\n\n  hurtBird = () => {\n    let birdHearts = this.state.birdHearts.map(heart => heart);\n    birdHearts.shift();\n\n    this.setState({\n      playerStatus: \"idle\",\n      birdStatus: \"idle\",\n      birdHearts\n    });\n  };\n\n  hurtPlayer = () => {\n    let playerHearts = this.state.playerHearts.map(heart => heart);\n    playerHearts.shift();\n\n    this.setState({\n      playerStatus: \"idle\",\n      birdStatus: \"idle\",\n      playerHearts\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"forest\">\n        <Hearts char=\"player-life\" count={this.state.playerHearts} />\n        <Player attack={this.playerAttack} status={this.state.playerStatus} />\n        <Bird attack={this.birdAttack} status={this.state.birdStatus} />\n        <Hearts char=\"bird-life\" count={this.state.birdHearts} />\n      </section>\n    );\n  }\n}\n\nexport default Forest;\n","import React, { Component } from \"react\";\nimport \"../css/App.css\";\n\nimport Forest from \"./Forest\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Forest />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}